from email.mime import text
import logging
import sqlite3
import requests
from io import BytesIO
from telegram import Update, InputFile
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# Logging setup
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

BOT_TOKEN = "7858281120:AAFlOoOcgZ9p-sbRqSbq-vo4SNWWDslaZBQ"
OWNER_ID = 8022012230
Converso_API_KEY = "mg-tg-1"

# Database
conn = sqlite3.connect("config.db")
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS config (
    key TEXT PRIMARY KEY,
    value TEXT
)
""")
conn.commit()

# Helper functions
def get_model_id():
    cursor.execute("SELECT value FROM config WHERE key = 'model_id'")
    row = cursor.fetchone()
    return row[0] if row else "provider-1/FLUX.1.1-pro"

def escape_md(text: str) -> str:
    # Escape all special characters for MarkdownV2
    for ch in '_*[]`()~>#+=-|{}.!':
        text = text.replace(ch, f'\\{ch}')
    return text


# Commands
async def set_model(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != OWNER_ID:
        await update.message.reply_text("⛔ You are not authorized to use this command.")
        return
    
    if not context.args:
        await update.message.reply_text(
            "✨ *Usage:* `/setmodel <MODEL_ID>`",
            parse_mode="Markdown",
            reply_to_message_id=update.message.message_id
        )
        return
    
    model_id = context.args[0]
    cursor.execute("REPLACE INTO config (key, value) VALUES ('model_id', ?)", (model_id,))
    conn.commit()
    await update.message.reply_text(
        f"✅ *Model ID set to:* `{model_id}`",
        parse_mode="Markdown",
        reply_to_message_id=update.message.message_id
    )

async def get_model(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != OWNER_ID:
        await update.message.reply_text("⛔ You are not authorized to use this command.")
        return

    model_id = get_model_id()
    await update.message.reply_text(
        f"📌 *Current Model ID:* `{model_id}`",
        parse_mode="Markdown",
        reply_to_message_id=update.message.message_id
    )

async def generate_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text(
            "⚡ *Provide a prompt.*\n_Example:_ `/gen A cyberpunk dragon at night`",
            parse_mode="Markdown",
            reply_to_message_id=update.message.message_id
        )
        return

    prompt = " ".join(context.args)
    model_id = get_model_id()
    username = update.effective_user.first_name or "User"
    from datetime import datetime
    start_time = datetime.now()

    await update.message.reply_text(
        f"🎨 Generating image for: `{escape_md(prompt)}`",
        parse_mode="MarkdownV2",
        reply_to_message_id=update.message.message_id
    )

    url = "https://api.stylefort.store/telegram/images/generations"
    headers = {
        "Authorization": f"Bearer {Converso_API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "model": model_id,
        "prompt": prompt
    }

    try:
        response = requests.post(url, headers=headers, json=data)
        print(f"API Response: {response.json()}")  # Debugging line
        response.raise_for_status()
        result = response.json()

        image_url = result.get("url")
        if not image_url:
            await update.message.reply_text(
                "❌ *No image generated.* Try a more detailed prompt.",
                parse_mode="Markdown",
                reply_to_message_id=update.message.message_id
            )
            return

        img_data = requests.get(image_url).content
        image_io = BytesIO(img_data)
        image_io.name = "spoiler_image.jpg"

        time_spent = (datetime.now() - start_time).total_seconds()

        # Truncate prompt to 20 words if necessary
        prompt_words = prompt.split()
        if len(prompt_words) > 20:
            short_prompt = " ".join(prompt_words[:20]) + "..."
        else:
            short_prompt = prompt

        caption = (
            f"✨ Generation Complete\n"
            f"👤 Generated By: [\u200B{escape_md(username)}](tg://user?id={update.effective_user.id})\n"
            f"🖼️ Prompt: `{escape_md(short_prompt)}`\n"
            f"🕒 Generation Time: `{round(time_spent, 2)} seconds`\n\n"
            f"🤖 Bot created by [Muhammad Gohar](tg://user?id={OWNER_ID})\n"
            f"👑 Hypothetical Bot Owner: [Mohammad Elmaymouny](tg://user?id={7750893567})\n"
            f"*Powered by [Converso AI](https://conversoai.stylefort.store)*"
        )

        await update.message.reply_photo(
            photo=InputFile(image_io),
            caption=caption,
            parse_mode="MarkdownV2",
            has_spoiler=True,
            reply_to_message_id=update.message.message_id
        )

    except requests.exceptions.RequestException as e:
        logging.error(f"API request failed: {e}")
        await update.message.reply_text(
            "❌ *Failed to generate image.* Please try again later.",
            parse_mode="Markdown",
            reply_to_message_id=update.message.message_id
        )
    except (KeyError, IndexError):
        logging.error(f"Unexpected API response: {response.text}")
        await update.message.reply_text(
            "⚠️ *Unexpected API response.*",
            parse_mode="Markdown",
            reply_to_message_id=update.message.message_id
        )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "👋 *Welcome to the Premium AI Image Bot!*\n"
        "🎨 send `/gen <your prompt>` to create amazing images.",
        parse_mode="Markdown",
        reply_to_message_id=update.message.message_id
    )

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("setmodel", set_model))
    app.add_handler(CommandHandler("getmodel", get_model))
    app.add_handler(CommandHandler("gen", generate_image))

    app.run_polling()

if __name__ == "__main__":
    main()