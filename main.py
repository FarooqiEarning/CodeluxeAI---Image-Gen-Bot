import logging
import requests
from io import BytesIO
from telegram import Update, InputFile, InputMediaPhoto, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import asyncio
import nest_asyncio

# Logging setup
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
Test_BOT_TOKEN = "8070910422:AAFSpBMliJpaMu_R38iUBl41pM-PVJVMOQE"
BOT_TOKEN = "7858281120:AAEjH236OIMmE5Pl_U5N4JpNehJ9eoGDjfw"
OWNER_ID = 8022012230
Group_id = -4722355872
Group_chat_id = -1002866919101
Test_Group_id = -1002287883481
Converso_API_KEY = "mg-tg-1"
System_Server_URL = "http://localhost:8080"

def escape_md(text: str) -> str:
    for ch in '_*[]`()~>#+=-|{}.!':
        text = text.replace(ch, f'\\{ch}')
    return text

# --- Shared image sending logic for both command and API ---
async def Start_apiKey(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ùó Please provide an API key.")
        return

    random_key = context.args[0]
    user = update.effective_user
    user_id = f"{user.id}@telegram.org"
    user_name = f"{user.first_name} {user.last_name or ''}".strip()
    try:
        resp = requests.post(
            f"{System_Server_URL}/telegram/get/apiKey",
            json={"user_id": user_id, "user_name": user_name, "key": random_key},
            headers={"Authorization": f"Bearer {Converso_API_KEY}", "Content-Type": "application/json"},
            timeout=10
        )
        resp.raise_for_status()
        data = resp.json()

        if data.get("key") != random_key or not data.get("data") or not data.get("base"):
            await update.message.reply_text("‚ö†Ô∏è Invalid or incomplete response. Please try again.")
            return

        login_url = f"https://conversoai.stylefort.store/login?data={data['data']}&base={data['base']}"
        buttons = [[InlineKeyboardButton("üîê Login", url=login_url)]]
        await update.message.reply_text(
            "‚úÖ Click the button below to access your dashboard:",
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode="Markdown"
        )

    except requests.exceptions.RequestException:
        await update.message.reply_text("üö® Unable to reach server. Please try again later.")
    except Exception:
        # Only send error message if login button message (`sent`) hasn't been sent yet:
        if not locals().get("sent"):
            await update.message.reply_text("‚ö†Ô∏è An unexpected error occurred. Please try again.")

async def send_generated_image(
    bot_or_update, chat_id, prompt, image_url, time_spent, username=None, user_id=None, reply_to_message_id=None, is_api=False
):
    prompt_words = prompt.split()
    if len(prompt_words) > 20:
        short_prompt = " ".join(prompt_words[:20]) + "..."
    else:
        short_prompt = prompt
    if is_api:
        # API: no username/user_id context, just show prompt and time
        caption = (
            f"‚ú® Generation Complete\n"
            f"üë§ Generated By: [\u200B{escape_md(username)}]({user_id})\n"
            f"üñºÔ∏è Prompt: `{escape_md(short_prompt)}`\n"
            f"üïí Generation Time: `{round(time_spent, 2)} seconds`\n\n"
            f"ü§ñ Bot created by [Muhammad Gohar](tg://user?id={OWNER_ID})\n"
            f"*Powered by [Converso AI](https://conversoai.stylefort.store)*"
        )
    else:
        # Command: show user context
        caption = (
            f"‚ú® Generation Complete\n"
            f"üë§ Generated By: [\u200B{escape_md(username)}](tg://user?id={user_id})\n"
            f"üñºÔ∏è Prompt: `{escape_md(short_prompt)}`\n"
            f"üïí Generation Time: `{round(time_spent, 2)} seconds`\n\n"
            f"ü§ñ Bot created by [Muhammad Gohar](tg://user?id={OWNER_ID})\n"
            f"*Powered by [Converso AI](https://conversoai.stylefort.store)*"
        )
    img_data = requests.get(image_url).content
    image_io = BytesIO(img_data)
    image_io.name = "spoiler_image.jpg"
    if is_api:
        await bot_or_update.send_photo(
            chat_id=chat_id,
            photo=InputFile(image_io),
            caption=caption,
            parse_mode="MarkdownV2",
            has_spoiler=True,
            reply_to_message_id=reply_to_message_id
        )
    else:
        await bot_or_update.message.reply_photo(
            photo=InputFile(image_io),
            caption=caption,
            parse_mode="MarkdownV2",
            has_spoiler=True,
            reply_to_message_id=reply_to_message_id
        )

async def send_generated_album(
    bot_or_update, chat_id, prompt, image_urls, time_spent, username=None, user_id=None, reply_to_message_id=None, is_api=False
):
    prompt_words = prompt.split()
    short_prompt = " ".join(prompt_words[:20]) + "..." if len(prompt_words) > 20 else prompt
    if is_api:
        caption = (
            f"‚ú® Generation Complete\n"
            f"üë§ Generated By: [\u200B{escape_md(username)}]({user_id})\n"
            f"üñºÔ∏è Prompt: `{escape_md(short_prompt)}`\n"
            f"üïí Generation Time: `{round(time_spent, 2)} seconds`\n\n"
            f"ü§ñ Bot created by [Muhammad Gohar](tg://user?id={OWNER_ID})\n"
            f"*Powered by [Converso AI](https://conversoai.stylefort.store)*"
        )
    else:
        caption = (
            f"‚ú® Generation Complete\n"
            f"üë§ Generated By: [\u200B{escape_md(username)}](tg://user?id={user_id})\n"
            f"üñºÔ∏è Prompt: `{escape_md(short_prompt)}`\n"
            f"üïí Generation Time: `{round(time_spent, 2)} seconds`\n\n"
            f"ü§ñ Bot created by [Muhammad Gohar](tg://user?id={OWNER_ID})\n"
            f"*Powered by [Converso AI](https://conversoai.stylefort.store)*"
        )
    media = []
    for idx, img_url in enumerate(image_urls):
        if idx == 0:
            media.append(InputMediaPhoto(media=img_url, caption=caption, parse_mode="MarkdownV2", has_spoiler=True))
        else:
            media.append(InputMediaPhoto(media=img_url, has_spoiler=True))
    if is_api:
        await bot_or_update.send_media_group(
            chat_id=chat_id,
            media=media,
            reply_to_message_id=reply_to_message_id
        )
    else:
        await bot_or_update.message.reply_media_group(
            media,
            reply_to_message_id=reply_to_message_id
        )

def max_n_check(model_id, maximum_images):
    try:
        response = requests.get("https://api.stylefort.store/v1/models")
        response.raise_for_status()
        models = response.json()
    except requests.RequestException as e:
        raise RuntimeError(f"Failed to fetch models: {e}")

    for model in models:
        if model.get("id") == model_id:
            max_images = model.get("maximum_images", 0)
            return {"max_n": max_images, "check": max_images >= maximum_images}

    # If the model_id is not found
    return {"max_n": 0, "check": False}

# --- Telegram Bot Commands (continued) ---
async def generate_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(update.effective_chat.id, update.effective_user.id)
    if update.effective_chat.id not in [OWNER_ID, Group_id, Group_chat_id, Test_Group_id]:
        await update.message.reply_text(
            "‚ùå Not Allowed in Private Chats.\n You can only use this command in the [Converso AI - Chat Group](https://t.me/conversoai_chat)",
            parse_mode="Markdown",
            reply_to_message_id=update.message.message_id if update.message else None
        )
        return
    if not context.args:
        await update.message.reply_text(
            "‚ö° *Provide a prompt.*\n_Example:_ `/gen A cyberpunk dragon at night`",
            parse_mode="Markdown",
            reply_to_message_id=update.message.message_id if update.message else None
        )
        return
    prompt = " ".join(context.args)
    import re
    n = 1  # Default to 1
    n_match = re.search(r"n=(\d+)", prompt)
    if n_match:
        n = int(n_match.group(1))
        prompt = re.sub(r"n=\d+", "", prompt).strip()
    p_model = re.search(r"model=([\w-]+)", prompt)
    if p_model:
        model_id = p_model.group(1)
    else:
        model_id = "flux.1.1-pro"
    check = max_n_check(model_id, n)
    if not check.get("check"):
        await update.message.reply_text(
            f"‚ö†Ô∏è *The maximum number of images supported by this model: {model_id} is {check.get('max_n')}.*\n"
            "‚ú® Please reduce the number of images you want to generate.",
            parse_mode="Markdown",
            reply_to_message_id=update.message.message_id if update.message else None
        )
        return
    if len(prompt.split()) < 3:
        await update.message.reply_text(
            "üö´ *Your prompt is too short!*\n\n"
            "‚ú® Please provide a more descriptive prompt with at least *three words* for image generation.\n"
            "_Example:_ `/gen A futuristic neon cityscape`",
            parse_mode="Markdown",
            reply_to_message_id=update.message.message_id if update.message else None
        )
        return
    username = update.effective_user.first_name or "User"
    user_id = update.effective_user.id
    from datetime import datetime
    start_time = datetime.now()
    await update.message.reply_text(
        f"üé® Generating image for: `{escape_md(prompt)}`",
        parse_mode="MarkdownV2",
        reply_to_message_id=update.message.message_id if update.message else None
    )
    url = f"{System_Server_URL}/telegram/images/generations"
    headers = {
        "Authorization": f"Bearer {Converso_API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "model": model_id,
        "prompt": prompt,
    }
    if n:
        data["n"] = n
    else:
        data["n"] = 1
    print(f"Requesting image generation with data: {data}")
    try:
        response = requests.post(url, headers=headers, json=data)
        result = response.json()
        print(f"API Response: {result}")
        # If result is a list, treat as album, else as single image
        if isinstance(result, list):
            image_urls = [img_obj.get("url") for img_obj in result if img_obj.get("url")]
            if not image_urls:
                await update.message.reply_text(
                    "‚ùå *No image generated.* Try a more detailed prompt.",
                    parse_mode="Markdown",
                    reply_to_message_id=update.message.message_id if update.message else None
                )
                return
            time_spent = (datetime.now() - start_time).total_seconds()
            await send_generated_album(
                update, update.effective_chat.id, prompt, image_urls, time_spent,
                username=username, user_id=user_id, reply_to_message_id=update.message.message_id, is_api=False
            )
            return
        # Fallback to old logic for single image
        image_url = result.get("url")
        if not image_url:
            await update.message.reply_text(
                "‚ùå *No image generated.* Try a more detailed prompt.",
                parse_mode="Markdown",
                reply_to_message_id=update.message.message_id if update.message else None
            )
            return
        time_spent = (datetime.now() - start_time).total_seconds()
        await send_generated_image(
            update, update.effective_chat.id, prompt, image_url, time_spent,
            username=username, user_id=user_id, reply_to_message_id=update.message.message_id, is_api=False
        )
    except requests.exceptions.RequestException as e:
        logging.error(f"API request failed: {e}")
        await update.message.reply_text(
            "‚ùå *Failed to generate image.* Please try again later.",
            parse_mode="Markdown",
            reply_to_message_id=update.message.message_id if update.message else None
        )
    except (KeyError, IndexError):
        logging.error(f"Unexpected API response: {response.text}")
        await update.message.reply_text(
            "‚ö†Ô∏è *Unexpected API response.*",
            parse_mode="Markdown",
            reply_to_message_id=update.message.message_id if update.message else None
        )

async def api_key(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = f"{update.effective_user.id}@telegram.org"
    user_name = f"{update.effective_user.first_name} {update.effective_user.last_name or ''}".strip()
    url = f"{System_Server_URL}/telegram/get/apiKey"
    res = requests.post(url, json={
        "user_id": user_id,
        "user_name": user_name
    }, headers={
        "Authorization": f"Bearer {Converso_API_KEY}",
        "Content-Type": "application/json"
    })
    if res.status_code == 200:
        data = res.json()
        api_key = data["api_key"]
        await update.message.reply_text(f"{data['message']}\n\n`{api_key}`", parse_mode="Markdown")
    else:
        await update.message.reply_text("‚ö†Ô∏è Something went wrong. Please try again later.")

# --- Main Entrypoint ---
async def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", Start_apiKey))
    app.add_handler(CommandHandler("gen", generate_image))
    app.add_handler(CommandHandler("apiKey", api_key))
    await app.run_polling()

if __name__ == "__main__":
    nest_asyncio.apply()
    asyncio.run(main())
