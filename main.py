import logging
import requests
from io import BytesIO
from telegram import Update, InputFile, InputMediaPhoto
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import asyncio
import nest_asyncio

# Logging setup
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
Test_BOT_TOKEN = "8070910422:AAFSpBMliJpaMu_R38iUBl41pM-PVJVMOQE"
BOT_TOKEN = "7858281120:AAEjH236OIMmE5Pl_U5N4JpNehJ9eoGDjfw"
OWNER_ID = 8022012230
Converso_API_KEY = "mg-tg-1"
Server_URL = "https://api.stylefort.store"

def escape_md(text: str) -> str:
    for ch in '_*[]`()~>#+=-|{}.!':
        text = text.replace(ch, f'\\{ch}')
    return text

async def send_generated_image(
    bot_or_update, prompt, image_url, time_spent, username=None, user_id=None, reply_to_message_id=None, model_id=None
):
    prompt_words = prompt.split()
    if len(prompt_words) > 20:
        short_prompt = " ".join(prompt_words[:20]) + "..."
    else:
        short_prompt = prompt
    caption = (
        f"‚ú® Generation Complete\n"
        f"üë§ Generated By: [\u200B{escape_md(username)}](tg://user?id={user_id})\n"
        f"üñºÔ∏è Prompt: `{escape_md(short_prompt)}`\n"
        f"üïí Generation Time: `{round(time_spent, 2)} seconds`\n"
        f"üñºÔ∏è Model: `{model_id}`\n\n"
        f"ü§ñ Bot created by [Muhammad Gohar](tg://user?id={OWNER_ID})\n"
        f"*Powered by [Converso AI](https://conversoai.stylefort.store)*"
    )
    img_data = requests.get(image_url).content
    image_io = BytesIO(img_data)
    image_io.name = "spoiler_image.jpg"
    await bot_or_update.message.reply_photo(
        photo=InputFile(image_io),
        caption=caption,
        parse_mode="MarkdownV2",
        has_spoiler=True,
        reply_to_message_id=reply_to_message_id
    )

async def send_generated_album(
    bot_or_update, prompt, image_urls, time_spent, username=None, user_id=None, reply_to_message_id=None, model_id=None
):
    prompt_words = prompt.split()
    short_prompt = " ".join(prompt_words[:20]) + "..." if len(prompt_words) > 20 else prompt
    caption = (
        f"‚ú® Generation Complete\n"
        f"üë§ Generated By: [\u200B{escape_md(username)}](tg://user?id={user_id})\n"
        f"üñºÔ∏è Prompt: `{escape_md(short_prompt)}`\n"
        f"üïí Generation Time: `{round(time_spent, 2)} seconds`\n"
        f"üñºÔ∏è Model: `{model_id}`\n\n"
        f"ü§ñ Bot created by [Muhammad Gohar](tg://user?id={OWNER_ID})\n"
        f"*Powered by [Converso AI](https://conversoai.stylefort.store)*"
    )
    media = []
    for idx, img_url in enumerate(image_urls):
        if idx == 0:
            media.append(InputMediaPhoto(media=img_url, caption=caption, parse_mode="MarkdownV2", has_spoiler=True))
        else:
            media.append(InputMediaPhoto(media=img_url, has_spoiler=True))
    await bot_or_update.message.reply_media_group(
        media,
        reply_to_message_id=reply_to_message_id
    )

def max_n_check(model_id, maximum_images):
    try:
        response = requests.get(f"{Server_URL}/v1/models")
        response.raise_for_status()
        models = response.json()
    except requests.RequestException as e:
        raise RuntimeError(f"Failed to fetch models: {e}")

    for model in models:
        if model.get("id") == model_id:
            max_images = model.get("maximum_images", 0)
            return {"max_n": max_images, "check": max_images >= maximum_images}
    return {"max_n": 0, "check": False}


# --- Telegram Bot Commands (continued) ---
async def generate_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(update.effective_chat.id, update.effective_user.id)
    if not context.args:
        await update.message.reply_text(
            "‚ö° *Provide a prompt.*\n_Example:_ `/gen A cyberpunk dragon at night`",
            parse_mode="Markdown",
            reply_to_message_id=update.message.message_id if update.message else None
        )
        return
    prompt = " ".join(context.args)
    import re
    n = 1  # Default to 1
    n_match = re.search(r"n=(\d+)", prompt)
    if n_match:
        n = int(n_match.group(1))
        prompt = re.sub(r"n=\d+", "", prompt).strip()

    model_id = "imagen-3"
    m_match = re.search(r"m=([\w\.-]+)", prompt)
    if m_match:
        model_id = m_match.group(1)
        prompt = re.sub(r"m=([\w\.-]+)", "", prompt).strip()

    check = max_n_check(model_id, n)
    if check.get("max_n") == 0:
        await update.message.reply_text(
            f"‚ö†Ô∏è *Invalid Model ID: `{model_id}`*\n"
            "‚ú® Please visit: [Converso AI - Image Models](https://conversoai.stylefort.store/models) and use a valid model ID.",
            parse_mode="Markdown",
            reply_to_message_id=update.message.message_id if update.message else None
        )
        return
    if not check.get("check"):
        await update.message.reply_text(
            f"‚ö†Ô∏è *The maximum number of images supported by this model `{model_id}` is {check.get('max_n')}.*\n"
            "‚ú® Please reduce the number of images you want to generate.",
            parse_mode="Markdown",
            reply_to_message_id=update.message.message_id if update.message else None
        )
        return

    if len(prompt.split()) < 3:
        await update.message.reply_text(
            "üö´ *Your prompt is too short!*\n\n"
            "‚ú® Please provide a more descriptive prompt with at least *three words* for image generation.\n"
            "_Example:_ `/gen A futuristic neon cityscape`",
            parse_mode="Markdown",
            reply_to_message_id=update.message.message_id if update.message else None
        )
        return
    username = update.effective_user.first_name or "User"
    user_id = update.effective_user.id
    from datetime import datetime
    start_time = datetime.now()
    await update.message.reply_text(
        f"üé® Generating image for: `{escape_md(prompt)}`",
        parse_mode="MarkdownV2",
        reply_to_message_id=update.message.message_id if update.message else None
    )
    url = f"{Server_URL}/telegram/images/generations"
    headers = {
        "Authorization": f"Bearer {Converso_API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "model": model_id,
        "prompt": prompt,
    }
    if n:
        data["n"] = n
    else:
        data["n"] = 1
    print(f"Requesting image generation with data: {data}")
    try:
        response = requests.post(url, headers=headers, json=data)
        result = response.json()
        print(f"API Response: {result}")
        # If result is a list, treat as album, else as single image
        if isinstance(result, list):
            image_urls = [img_obj.get("url") for img_obj in result if img_obj.get("url")]
            if not image_urls:
                await update.message.reply_text(
                    "‚ùå *No image generated.* Try a more detailed prompt.",
                    parse_mode="Markdown",
                    reply_to_message_id=update.message.message_id if update.message else None
                )
                return
            time_spent = (datetime.now() - start_time).total_seconds()
            await send_generated_album(
                update, prompt, image_urls, time_spent,
                username=username, user_id=user_id, reply_to_message_id=update.message.message_id, model_id=model_id
            )
            return
        # Fallback to old logic for single image
        image_url = result.get("url")
        if not image_url:
            await update.message.reply_text(
                "‚ùå *No image generated.* Try a more detailed prompt.",
                parse_mode="Markdown",
                reply_to_message_id=update.message.message_id if update.message else None
            )
            return
        time_spent = (datetime.now() - start_time).total_seconds()
        await send_generated_image(
            update, prompt, image_url, time_spent,
            username=username, user_id=user_id, reply_to_message_id=update.message.message_id, model_id=model_id
        )
    except requests.exceptions.RequestException as e:
        logging.error(f"API request failed: {e}")
        await update.message.reply_text(
            "‚ùå *Failed to generate image.* Please try again later.",
            parse_mode="Markdown",
            reply_to_message_id=update.message.message_id if update.message else None
        )
    except (KeyError, IndexError):
        logging.error(f"Unexpected API response: {response.text}")
        await update.message.reply_text(
            "‚ö†Ô∏è *Unexpected API response.*",
            parse_mode="Markdown",
            reply_to_message_id=update.message.message_id if update.message else None
        )

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /start command"""
    welcome_msg = (
        "üé® *Welcome to Converso AI - Image Gen Bot!*\n\n"
        "*Generate stunning images with AI:*\n"
        "`/gen your prompt` - Generate 1 image\n"
        "`/gen your prompt n={number}` - Generate multiple images\n"
        "`/gen your prompt m={model_id}` - Use specific model\n\n"
        "üí° *Tips:*\n"
        "‚Ä¢ Use descriptive prompts (min 3 words)\n"
        "‚Ä¢ Combine parameters: `/gen sunset n=2 m=flux.1-dev`\n\n"
        "ü§ñ *For Models Visit:* [Converso AI - Image Models](https://conversoai.stylefort.store/models)\n"
        "Join our [Chat Group](https://t.me/conversoai_chat) for support!"
    )

    await update.message.reply_text(
        welcome_msg,
        parse_mode="Markdown",
        disable_web_page_preview=True,
        reply_to_message_id=update.message.message_id
    )

# --- Main Entrypoint ---
async def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("gen", generate_image))
    await app.run_polling()

if __name__ == "__main__":
    nest_asyncio.apply()
    asyncio.run(main())